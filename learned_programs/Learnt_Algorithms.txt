Algorithms Learnt:

1) Kadane's Algorithm
    Application: Helps to solve maximum possible subarray sum within time complexity of O(n).

    Example:
    Array:                -1 4 -6 7 -4
    Cummulative Sum:      -1-->update to 0 
    Cummulative Sum:       0 
    Cummulative Sum:       0 4 -2-->update to 0
    Cummulative Sum:       0 4  0 7  3
    Maximum possible sum of subarray = 7

--> Refer: 61-array_challenge_11.cpp

    Disadvantage: If array contains all negative numbers, then max sum will always be 0, which is not true. This issue needs a solution.
    
    Problem solved:
        --> Refer: 62-array_challenge_12.cpp

--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--

2)Euclid's Algorithm for greatest comman divisor (gcd)or(HCF)
-->While finding the greatest comman divisor of two numbers a and b, 
-->Consideration a>b
    
    Basic Euclid's Algorithm
    --> Do until one of the numbers doesn't become 0 
    --> gcd(a,b)=gcd(b,a-b) and so on and so forth
    
        eg:gcd(42,24)-->gcd(24,18)-->gcd(18,6)-->gcd(12,6)-->gcd(6,6)=6
           gcd(84,21)-->gcd(63,21)-->gcd(42,21)-->gcd(21,21)=21;

    Extended Euclid's Algorithm:
    --> Do until one of the numbers doesn't become 0 
    --> gcd(a,b)=gcd(b,b%a) and so on and so forth 
        eg:
            gcd(42,24)=42%24-->18-->gcd(24,18)=24%18=6-->gcd(18,6)=18%6=0-->gcd(42,24)=6

    Problem solved:
        --> Refer: 100-euclids_algorith_for_gcd.cpp

--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--*--